{
  "src/lib/components/ExtendableGraph.react.js": {
    "description": "ExtendableGraph can be used to render any plotly.js-powered data vis.\r\n\nYou can define callbacks based on user interaction with ExtendableGraphs such\r\nas hovering, clicking or selecting",
    "displayName": "ExtendableGraphWithDefaults",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\r\nin callbacks. The ID needs to be unique across all of the\r\ncomponents in an app."
      },
      "clickData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest click event. Read-only.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "clickAnnotationData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest click annotation event. Read-only.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "hoverData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest hover event. Read-only.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "clear_on_unhover": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If True, `clear_on_unhover` will clear the `hoverData` property\r\nwhen the user \"unhovers\" from a point.\r\nIf False, then the `hoverData` property will be equal to the\r\ndata from the last point that was hovered over.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "selectedData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest select event. Read-only.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "relayoutData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest relayout event which occurs\r\nwhen the user zooms or pans on the plot or other\r\nlayout-level edits. Has the form `{<attr string>: <value>}`\r\ndescribing the changes made. Read-only.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "extendData": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "array"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Data that should be appended to existing traces. Has the form\r\n`[updateData, traceIndices, maxPoints]`, where `updateData` is an array\r\ncontaining data objects to extend, `traceIndices` (optional) is an array\r\nof trace indices that should be extended, and `maxPoints` (optional) is\r\neither an integer defining the maximum number of points allowed or an\r\nobject with key:value pairs matching `updateData`\r\nReference the Plotly.extendTraces API for full usage:\r\nhttps://plot.ly/javascript/plotlyjs-function-reference/#plotlyextendtraces",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "restyleData": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Data from latest restyle event which occurs\r\nwhen the user toggles a legend item, changes\r\nparcoords selections, or other trace-level edits.\r\nHas the form `[edits, indices]`, where `edits` is an object\r\n`{<attr string>: <value>}` describing the changes made,\r\nand `indices` is an array of trace indices that were edited.\r\nRead-only.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "figure": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.exact({\r\n    data: PropTypes.arrayOf(PropTypes.object),\r\n    layout: PropTypes.object,\r\n    frames: PropTypes.arrayOf(PropTypes.object),\r\n})"
        },
        "required": false,
        "description": "Plotly `figure` object. See schema:\r\nhttps://plot.ly/javascript/reference\r\n\n`config` is set separately by the `config` property",
        "defaultValue": {
          "value": "{data: [], layout: {}, frames: []}",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Generic style overrides on the plot div"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "className of the parent div"
      },
      "animate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Beta: If true, animate between updates using\r\nplotly.js's `animate` function",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "animation_options": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Beta: Object containing animation settings.\r\nOnly applies if `animate` is `true`",
        "defaultValue": {
          "value": "{\r\n    frame: {\r\n        redraw: false,\r\n    },\r\n    transition: {\r\n        duration: 750,\r\n        ease: 'cubic-in-out',\r\n    },\r\n}",
          "computed": false
        }
      },
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.exact({\r\n    /**\r\n     * No interactivity, for export or image generation\r\n     */\r\n    staticPlot: PropTypes.bool,\r\n\r\n    /**\r\n     * Base URL for a Plotly cloud instance, if `showSendToCloud` is enabled\r\n     */\r\n    plotlyServerURL: PropTypes.string,\r\n\r\n    /**\r\n     * We can edit titles, move annotations, etc - sets all pieces of `edits`\r\n     * unless a separate `edits` config item overrides individual parts\r\n     */\r\n    editable: PropTypes.bool,\r\n\r\n    /**\r\n     * A set of editable properties\r\n     */\r\n    edits: PropTypes.exact({\r\n        /**\r\n         * annotationPosition: the main anchor of the annotation, which is the\r\n         * text (if no arrow) or the arrow (which drags the whole thing leaving\r\n         * the arrow length & direction unchanged)\r\n         */\r\n        annotationPosition: PropTypes.bool,\r\n\r\n        /**\r\n         * Just for annotations with arrows, change the length and direction of the arrow\r\n         */\r\n        annotationTail: PropTypes.bool,\r\n\r\n        annotationText: PropTypes.bool,\r\n\r\n        axisTitleText: PropTypes.bool,\r\n\r\n        colorbarPosition: PropTypes.bool,\r\n\r\n        colorbarTitleText: PropTypes.bool,\r\n\r\n        legendPosition: PropTypes.bool,\r\n\r\n        /**\r\n         * Edit the trace name fields from the legend\r\n         */\r\n        legendText: PropTypes.bool,\r\n\r\n        shapePosition: PropTypes.bool,\r\n\r\n        /**\r\n         * The global `layout.title`\r\n         */\r\n        titleText: PropTypes.bool,\r\n    }),\r\n\r\n    /**\r\n     * DO autosize once regardless of layout.autosize\r\n     * (use default width or height values otherwise)\r\n     */\r\n    autosizable: PropTypes.bool,\r\n\r\n    /**\r\n     * Whether to change layout size when the window size changes\r\n     */\r\n    responsive: PropTypes.bool,\r\n\r\n    /**\r\n     * Set the length of the undo/redo queue\r\n     */\r\n    queueLength: PropTypes.number,\r\n\r\n    /**\r\n     * If we DO autosize, do we fill the container or the screen?\r\n     */\r\n    fillFrame: PropTypes.bool,\r\n\r\n    /**\r\n     * If we DO autosize, set the frame margins in percents of plot size\r\n     */\r\n    frameMargins: PropTypes.number,\r\n\r\n    /**\r\n     * Mousewheel or two-finger scroll zooms the plot\r\n     */\r\n    scrollZoom: PropTypes.bool,\r\n\r\n    /**\r\n     * Double click interaction (false, 'reset', 'autosize' or 'reset+autosize')\r\n     */\r\n    doubleClick: PropTypes.oneOf([\r\n        false,\r\n        'reset',\r\n        'autosize',\r\n        'reset+autosize',\r\n    ]),\r\n\r\n    /**\r\n     * New users see some hints about interactivity\r\n     */\r\n    showTips: PropTypes.bool,\r\n\r\n    /**\r\n     * Enable axis pan/zoom drag handles\r\n     */\r\n    showAxisDragHandles: PropTypes.bool,\r\n\r\n    /**\r\n     * Enable direct range entry at the pan/zoom drag points\r\n     * (drag handles must be enabled above)\r\n     */\r\n    showAxisRangeEntryBoxes: PropTypes.bool,\r\n\r\n    /**\r\n     * Link to open this plot in plotly\r\n     */\r\n    showLink: PropTypes.bool,\r\n\r\n    /**\r\n     * If we show a link, does it contain data or just link to a plotly file?\r\n     */\r\n    sendData: PropTypes.bool,\r\n\r\n    /**\r\n     * Text appearing in the sendData link\r\n     */\r\n    linkText: PropTypes.string,\r\n\r\n    /**\r\n     * Display the mode bar (true, false, or 'hover')\r\n     */\r\n    displayModeBar: PropTypes.oneOf([true, false, 'hover']),\r\n\r\n    /**\r\n     * Should we include a modebar button to send this data to a\r\n     * Plotly Cloud instance, linked by `plotlyServerURL`.\r\n     * By default this is false.\r\n     */\r\n    showSendToCloud: PropTypes.bool,\r\n\r\n    /**\r\n     * Remove mode bar button by name.\r\n     * All modebar button names at https://github.com/plotly/plotly.js/blob/master/src/components/modebar/buttons.js\r\n     * Common names include:\r\n     *  - sendDataToCloud\r\n     * - (2D): zoom2d, pan2d, select2d, lasso2d, zoomIn2d, zoomOut2d, autoScale2d, resetScale2d\r\n     * - (Cartesian): hoverClosestCartesian, hoverCompareCartesian\r\n     * - (3D): zoom3d, pan3d, orbitRotation, tableRotation, handleDrag3d, resetCameraDefault3d, resetCameraLastSave3d, hoverClosest3d\r\n     * - (Geo): zoomInGeo, zoomOutGeo, resetGeo, hoverClosestGeo\r\n     * - hoverClosestGl2d, hoverClosestPie, toggleHover, resetViews\r\n     */\r\n    modeBarButtonsToRemove: PropTypes.array,\r\n\r\n    /**\r\n     * Add mode bar button using config objects\r\n     */\r\n    modeBarButtonsToAdd: PropTypes.array,\r\n\r\n    /**\r\n     * Fully custom mode bar buttons as nested array,\r\n     * where the outer arrays represents button groups, and\r\n     * the inner arrays have buttons config objects or names of default buttons\r\n     */\r\n    modeBarButtons: PropTypes.any,\r\n\r\n    /**\r\n     * Modifications to how the toImage modebar button works\r\n     */\r\n    toImageButtonOptions: PropTypes.exact({\r\n        /**\r\n         * The file format to create\r\n         */\r\n        format: PropTypes.oneOf(['jpeg', 'png', 'webp', 'svg']),\r\n        /**\r\n         * The name given to the downloaded file\r\n         */\r\n        filename: PropTypes.string,\r\n        /**\r\n         * Width of the downloaded file, in px\r\n         */\r\n        width: PropTypes.number,\r\n        /**\r\n         * Height of the downloaded file, in px\r\n         */\r\n        height: PropTypes.number,\r\n        /**\r\n         * Extra resolution to give the file after\r\n         * rendering it with the given width and height\r\n         */\r\n        scale: PropTypes.number,\r\n    }),\r\n\r\n    /**\r\n     * Add the plotly logo on the end of the mode bar\r\n     */\r\n    displaylogo: PropTypes.bool,\r\n\r\n    /**\r\n     * Add the plotly logo even with no modebar\r\n     */\r\n    watermark: PropTypes.bool,\r\n\r\n    /**\r\n     * Increase the pixel ratio for Gl plot images\r\n     */\r\n    plotGlPixelRatio: PropTypes.number,\r\n\r\n    /**\r\n     * URL to topojson files used in geo charts\r\n     */\r\n    topojsonURL: PropTypes.string,\r\n\r\n    /**\r\n     * Mapbox access token (required to plot mapbox trace types)\r\n     * If using an Mapbox Atlas server, set this option to '',\r\n     * so that plotly.js won't attempt to authenticate to the public Mapbox server.\r\n     */\r\n    mapboxAccessToken: PropTypes.any,\r\n\r\n    /**\r\n     * The locale to use. Locales may be provided with the plot\r\n     * (`locales` below) or by loading them on the page, see:\r\n     * https://github.com/plotly/plotly.js/blob/master/dist/README.md#to-include-localization\r\n     */\r\n    locale: PropTypes.string,\r\n\r\n    /**\r\n     * Localization definitions, if you choose to provide them with the\r\n     * plot rather than registering them globally.\r\n     */\r\n    locales: PropTypes.object,\r\n})"
        },
        "required": false,
        "description": "Plotly.js config options.\r\nSee https://plot.ly/javascript/configuration-options/\r\nfor more info.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function that updates the state tree."
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      }
    }
  }
}